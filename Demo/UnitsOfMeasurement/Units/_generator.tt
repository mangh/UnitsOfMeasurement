<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" encoding="utf-8" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(SolutionDir)VisualStudioExtension\Parser\bin\$(Configuration)\Man.UnitsOfMeasurement.Parser.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Man.UnitsOfMeasurement" #>
<#
    Initialize("_definitions.txt");

    List<UnitType> units = new List<UnitType>();
    List<ScaleType> scales = new List<ScaleType>();
    using (StreamReader input = File.OpenText(__inputFilePath))
    {
        Lexer lexer = new Lexer(input, LogParserError);
        Parser parser = new Parser(lexer, units, scales);
        parser.Parse();
    }

    __family = 0;
    if (__one_cs_file)
    {
        StartNamespace("System");
        foreach (UnitType u in units)
        {
            ProcessUnit(u);
        }
        __scalestartfamily = __family;
        foreach (ScaleType s in scales)
        {
            ProcessScale(s);
        }
        MakeCatalog(units, scales);
        EndNamespace();
        SaveItem(__templateName + ".cs");
    }
    else
    {
        foreach (UnitType u in units)
        {
            StartNamespace("System");
            ProcessUnit(u);
            EndNamespace();
            SaveItem(u.Name + ".cs");
        }
        __scalestartfamily = __family;
        foreach (ScaleType s in scales)
        {
            StartNamespace("System");
            ProcessScale(s);
            EndNamespace();
            SaveItem(s.Name + ".cs");
        }
        StartNamespace("System");
        MakeCatalog(units, scales);
        EndNamespace();
        SaveItem("Catalog.Populate.cs");
    }

    Summarize(units, scales);
    DeleteObsoleteItems();
    if (!__one_cs_file) __template.ExpandView();
#>

<#+
    bool __one_cs_file = false;  // set this to "true" to generate all units & scales in a single .cs file

    int __family;
    int __scalestartfamily;

    string __templateFolder;
    string __templateName;
    string __inputFilePath;
    string __targetNamespace;

    EnvDTE.Project __project;       // project containing this template
    EnvDTE.ProjectItem __template;  // this template

    List<string> __savedItems;

    void Initialize(string inputFileName)
    {
        __templateFolder = Path.GetDirectoryName(Host.TemplateFile);
        __templateName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
        __inputFilePath = Path.Combine(__templateFolder, inputFileName);
        __project = GetTemplateProject();
        __template = GetTemplateItem(__project.ProjectItems);
        __savedItems = new List<string>();

        __targetNamespace = (string)__template.Properties.Item("CustomToolNamespace").Value;
        if (string.IsNullOrWhiteSpace(__targetNamespace))
            __targetNamespace = (string)__project.Properties.Item("DefaultNamespace").Value;
    }

    EnvDTE.Project GetTemplateProject()
    {
        IServiceProvider serviceProvider = (IServiceProvider)this.Host;
        EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));    // = (EnvDTE.DTE)serviceProvider.GetCOMService(typeof(EnvDTE.DTE)) for VS2012+;
        Array projects = (Array)dte.ActiveSolutionProjects;
        return (EnvDTE.Project)projects.GetValue(0);
    }

    EnvDTE.ProjectItem GetTemplateItem(EnvDTE.ProjectItems items)
    {
        if (items != null)
        {
            foreach(EnvDTE.ProjectItem item in items)
            {
                EnvDTE.Property itempath = item.Properties.Item("FullPath");
                if ((itempath != null) && Host.TemplateFile.Equals((string)itempath.Value, StringComparison.OrdinalIgnoreCase))
                    return item;

                EnvDTE.ProjectItem subitem = GetTemplateItem(item.ProjectItems);
                if (subitem != null)
                    return subitem;
            }
        }
        return null;
    }

    void LogParserError(bool isError, int line, int column, string token, string message)
    {
        var error = new CompilerError(__inputFilePath, line, column, token, message);
        error.IsWarning = !isError;
        this.Errors.Add(error);
    }

    void StartNamespace(params string[] namespaces)
    {
        WriteLine(
@"/*******************************************************************************

    Units of Measurement for C# applications

    Copyright (C) Marek Aniola

    This program is provided to you under the terms of the license
    as published at https://github.com/mangh/unitsofmeasurement


********************************************************************************/");

        foreach(string ns in namespaces)
        {
            WriteLine("using {0};", ns);
        }
        WriteLine(string.Empty);
        WriteLine("namespace {0}", __targetNamespace);
        WriteLine(@"{");
    }

    void EndNamespace()
    {
        WriteLine(@"}");
    }

    void SaveItem(string fileName)
    {
        string filePath = Path.Combine(__templateFolder, fileName);
        File.WriteAllText(filePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Clear();
        __template.ProjectItems.AddFromFile(filePath);
        __savedItems.Add(fileName);
    }

    void DeleteObsoleteItems()
    {
        string summaryItemName = __templateName + ".txt";
        foreach (EnvDTE.ProjectItem item in __template.ProjectItems)
        {
            if (!item.Name.Equals(summaryItemName, StringComparison.OrdinalIgnoreCase) && !__savedItems.Contains(item.Name))
                item.Delete();
        }
    }

    void Summarize(List<UnitType> units, List<ScaleType> scales)
    {
        WriteLine("Units and Scales generated on {0}", DateTime.Now);
        WriteLine(string.Empty);

        WriteLine(
@"////////////////////////////////////////////////////////////////////////////////
//
//  U N I T S                              | {0} units | {1} families (id: {2} - {3})
//
////////////////////////////////////////////////////////////////////////////////
[dim] unit {{tags}} : factor (family)", units.Count, __scalestartfamily, 0, __scalestartfamily - 1);

        foreach (UnitType u in units)
        {
            WriteLine(string.Empty);
            WriteLine("{0} ({1})", u.ToString(), u.FamilyPrime().Name);
            WriteLine(string.Empty);

            foreach (MeasureType s in u.Relatives())
            {
                WriteLine("    ({0}){1}", u.Name, ((UnitType)s).Name);
            }
            foreach (BinaryOperation o in u.OuterOperations)
            {
                WriteLine("    {0} = {1} {2} {3}", o.Result.Name, o.Lhs.Name, o.Operation, o.Rhs.Name);
            }
        }

        WriteLine(string.Empty);
        WriteLine(
@"////////////////////////////////////////////////////////////////////////////////
//
//  S C A L E S                            | {0} scales | {1} families (id: {2} - {3})
//
////////////////////////////////////////////////////////////////////////////////
[dim] scale : refpoint = unit offset (family)", scales.Count, __family - __scalestartfamily, __scalestartfamily, __family - 1);

        foreach (ScaleType s in scales)
        {
            WriteLine(string.Empty);
            WriteLine("{0} ({1})", s.ToString(), s.FamilyPrime().Name);
            WriteLine(string.Empty);

            foreach (MeasureType x in s.Relatives())
            {
                WriteLine("    ({0}){1}", s.Name, ((ScaleType)x).Name);
            }
        }

        WriteLine(string.Empty);
        WriteLine("// End of report ///////////////////////////////////////////////////////////////");
    }
#>

<#+
    void ProcessUnit(UnitType u)
    {
        string Unit = u.Name;
        string UnitProxy = Unit + "_Proxy";
        string Sense = u.Sense.Code;
        string Family = (u.Prime == null) ? (__family++).ToString() : string.Format("{0}.Family", u.FamilyPrime().Name);
        string Format = u.Format;
        string Tags = string.Format("\"{0}\"", string.Join("\", \"", u.Tags));
        
        string Factor = u.Factor.Code;
        string Value = u.Factor.Value.Type.Name;
        string One = u.Factor.Value.Type.One.CSString();
        string Zero = u.Factor.Value.Type.Zero.CSString();
#>
    public partial struct <#= Unit #> : IQuantity<<#= Value #>>, IEquatable<<#= Unit #>>, IComparable<<#= Unit #>>, IFormattable
    {
        #region Fields
        internal readonly <#= Value #> m_value;
        #endregion

        #region Properties
        public <#= Value #> Value { get { return m_value; } }
        Unit<<#= Value #>> IQuantity<<#= Value #>>.Unit { get { return <#= Unit #>.Proxy; } }
        #endregion

        #region Constructor(s)
        public <#= Unit #>(<#= Value #> value)
        {
            m_value = value;
        }
        #endregion

        #region Conversions
        public static explicit operator <#= Unit #>(<#= Value #> q) { return new <#= Unit #>(q); }
<#+
        foreach (MeasureType s in u.Relatives())
        {
            string Relative = ((UnitType)s).Name;
#>
        public static explicit operator <#= Unit #>(<#= Relative #> q) { return new <#= Unit #>((<#= Unit #>.Factor / <#= Relative #>.Factor) * q.m_value); }
<#+
        }
#>
        public static <#= Unit #> From(IQuantity<<#= Value #>> q)
        {
            if (q.Unit.Family != <#= Unit #>.Family) throw new InvalidOperationException(string.Format("Cannot convert \"{0}\" to \"<#= Unit #>\"", q.GetType().Name));
            return new <#= Unit #>((<#= Unit #>.Factor / q.Unit.Factor) * q.Value);
        }
        #endregion

        #region IObject / IEquatable<<#= Unit #>>
        public override int GetHashCode() { return m_value.GetHashCode(); }
        public override bool /* IObject */ Equals(object obj) { return (obj is <#= Unit #>) && Equals((<#= Unit #>)obj); }
        public bool /* IEquatable<<#= Unit #>> */ Equals(<#= Unit #> other) { return this.m_value == other.m_value; }
        #endregion

        #region Comparison / IComparable<<#= Unit #>>
        public static bool operator ==(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value == rhs.m_value; }
        public static bool operator !=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value != rhs.m_value; }
        public static bool operator <(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value < rhs.m_value; }
        public static bool operator >(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value > rhs.m_value; }
        public static bool operator <=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value <= rhs.m_value; }
        public static bool operator >=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value >= rhs.m_value; }
        public int /* IComparable<<#= Unit #>> */ CompareTo(<#= Unit #> other) { return this.m_value.CompareTo(other.m_value); }
        #endregion

        #region Arithmetic
        // Inner:
        public static <#= Unit #> operator +(<#= Unit #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs.m_value + rhs.m_value); }
        public static <#= Unit #> operator -(<#= Unit #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs.m_value - rhs.m_value); }
        public static <#= Unit #> operator ++(<#= Unit #> q) { return new <#= Unit #>(q.m_value + <#= One #>); }
        public static <#= Unit #> operator --(<#= Unit #> q) { return new <#= Unit #>(q.m_value - <#= One #>); }
        public static <#= Unit #> operator -(<#= Unit #> q) { return new <#= Unit #>(-q.m_value); }
        public static <#= Unit #> operator *(<#= Value #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs * rhs.m_value); }
        public static <#= Unit #> operator *(<#= Unit #> lhs, <#= Value #> rhs) { return new <#= Unit #>(lhs.m_value * rhs); }
        public static <#= Unit #> operator /(<#= Unit #> lhs, <#= Value #> rhs) { return new <#= Unit #>(lhs.m_value / rhs); }
        public static <#= Value #> operator /(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.m_value / rhs.m_value; }
        // Outer:
<#+
        foreach (BinaryOperation o in u.OuterOperations)
        {
            string lhsValue = (o.Lhs.IsPredefined) ? "lhs" : "lhs.m_value";
            string rhsValue = (o.Rhs.IsPredefined) ? "rhs" : "rhs.m_value";
            string action = (o.Operation == "^") ? "*" : o.Operation;
            string retValue = (o.Result.IsPredefined) ? 
                string.Format("{0} {1} {2}", lhsValue, action, rhsValue) :
                string.Format("new {0}({1} {2} {3})", o.Result.Name, lhsValue, action, rhsValue);
#>
        public static <#= o.Result.Name #> operator <#= o.Operation #>(<#= o.Lhs.Name #> lhs, <#= o.Rhs.Name #> rhs) { return <#= retValue #>; }
<#+
        }
#>
        #endregion

        #region Formatting
        public override string ToString() { return ToString(<#= Unit #>.Format, null); }
        public string ToString(string format) { return ToString(format, null); }
        public string ToString(IFormatProvider fp) { return ToString(<#= Unit #>.Format, fp); }
        public string /* IFormattable */ ToString(string format, IFormatProvider fp)
        {
            return string.Format(fp, format ?? <#= Unit #>.Format, m_value, <#= Unit #>.Symbol.Default);
        }
        #endregion

        #region Static fields
        private static readonly Dimension s_sense = <#= Sense #>;
        private static readonly int s_family = <#= Family #>;
        private static /*mutable*/ <#= Value #> s_factor = <#= Factor #>;
        private static /*mutable*/ string s_format = "<#= Format #>";
        private static readonly SymbolCollection s_symbol = new SymbolCollection(<#= Tags #>);
        private static readonly Unit<<#= Value #>> s_proxy = new <#= UnitProxy #>();

        private static readonly <#= Unit #> s_one = new <#= Unit #>(<#= One #>);
        private static readonly <#= Unit #> s_zero = new <#= Unit #>(<#= Zero #>);
        #endregion

        #region Static Properties
        public static Dimension Sense { get { return s_sense; } }
        public static int Family { get { return s_family; } }
        public static <#= Value #> Factor { get { return s_factor; } set { s_factor = value; } }
        public static string Format { get { return s_format; } set { s_format = value; } }
        public static SymbolCollection Symbol { get { return s_symbol; } }
        public static Unit<<#= Value #>> Proxy { get { return s_proxy; } }

        public static <#= Unit #> One { get { return s_one; } }
        public static <#= Unit #> Zero { get { return s_zero; } }
        #endregion
    }

    public partial class <#= UnitProxy #> : Unit<<#= Value #>>
    {
        #region Properties
        public override int Family { get { return <#= Unit #>.Family; } }
        public override Dimension Sense { get { return <#= Unit #>.Sense; } }
        public override SymbolCollection Symbol { get { return <#= Unit #>.Symbol; } }
        public override <#= Value #> Factor { get { return <#= Unit #>.Factor; } set { <#= Unit #>.Factor = value; } }
        public override string Format { get { return <#= Unit #>.Format; } set { <#= Unit #>.Format = value; } }
        #endregion

        #region Constructor(s)
        public <#= UnitProxy #>() :
            base(typeof(<#= Unit #>))
        {
        }
        #endregion

        #region Methods
        public override IQuantity<<#= Value #>> Create(<#= Value #> value)
        {
            return new <#= Unit #>(value);
        }
        public override IQuantity<<#= Value #>> From(IQuantity<<#= Value #>> quantity)
        {
            return <#= Unit #>.From(quantity);
        }
        #endregion
    }
<#+
    }
#>

<#+
    void ProcessScale(ScaleType s)
    {
        string Scale = s.Name;
        string ScaleProxy = Scale + "_Proxy";
        string Unit = s.Unit.Name;
        string Offset = s.Offset.Code;
        string Family = (s.Prime == null) ? (__family++).ToString() : string.Format("{0}.Family", s.FamilyPrime().Name);
        string Format = s.Format;

        string Value = s.Unit.Factor.Value.Type.Name;
        string One = s.Unit.Factor.Value.Type.One.CSString();
        string Zero = s.Unit.Factor.Value.Type.Zero.CSString();

        if (!string.IsNullOrWhiteSpace(s.RefPoint))
        {
#>
    [ScaleReferencePoint("<#= s.RefPoint #>")]
<#+
        }
#>
    public partial struct <#= Scale #> : ILevel<<#= Value #>>, IEquatable<<#= Scale #>>, IComparable<<#= Scale #>>, IFormattable
    {
        #region Fields
        internal readonly <#= Unit #> m_level;
        #endregion

        #region Properties
        public <#= Unit #> Level { get { return m_level; } }
        public <#= Unit #> NormalizedLevel { get { return (m_level - <#= Scale #>.Offset); } }

        IQuantity<<#= Value #>> ILevel<<#= Value #>>.Level { get { return Level; } }
        IQuantity<<#= Value #>> ILevel<<#= Value #>>.NormalizedLevel { get { return NormalizedLevel; } }
        Scale<<#= Value #>> ILevel<<#= Value #>>.Scale { get { return <#= Scale #>.Proxy; } }
        #endregion

        #region Constructor(s)
        public <#= Scale #>(<#= Unit #> level)
        {
            m_level = level;
        }
        public <#= Scale #>(<#= Value #> level) :
            this(new <#= Unit #>(level))
        {
        }
        #endregion

        #region Conversions
        public static explicit operator <#= Scale #>(<#= Value #> q) { return new <#= Scale #>(q); }
        public static explicit operator <#= Scale #>(<#= Unit #> q) { return new <#= Scale #>(q); }

<#+
        foreach (MeasureType x in s.Relatives())
        {
            string Relative = ((ScaleType)x).Name;
#>
        public static explicit operator <#= Scale #>(<#= Relative #> q) { return new <#= Scale #>((<#= Unit #>)(q.NormalizedLevel) + <#= Scale #>.Offset); }
<#+
        }
#>
        public static <#= Scale #> From(ILevel<<#= Value #>> q)
        {
            if (q.Scale.Family != <#= Scale #>.Family) throw new InvalidOperationException(string.Format("Cannot convert \"{0}\" to \"<#= Scale #>\".", q.GetType().Name));
            return new <#= Scale #>(<#= Unit #>.From(q.NormalizedLevel) + <#= Scale #>.Offset);
        }
        public static <#= Scale #> From(IQuantity<<#= Value #>> q)
        {
            Scale<<#= Value #>> scale = Catalog.Scale(<#= Scale #>.Family, q.Unit);
            if(scale == null) throw new InvalidOperationException(string.Format("Cannot convert \"{0}\" to \"<#= Scale #>\".", q.GetType().Name));
            return <#= Scale #>.From(scale.Create(q.Value));
        }
        #endregion

        #region IObject / IEquatable<<#= Scale #>>
        public override int GetHashCode() { return m_level.GetHashCode(); }
        public override bool /* IObject */ Equals(object obj) { return (obj is <#= Scale #>) && Equals((<#= Scale #>)obj); }
        public bool /* IEquatable<<#= Scale #>> */ Equals(<#= Scale #> other) { return this.m_level == other.m_level; }
        #endregion

        #region Comparison / IComparable<<#= Scale #>>
        public static bool operator ==(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level == rhs.m_level; }
        public static bool operator !=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level != rhs.m_level; }
        public static bool operator <(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level < rhs.m_level; }
        public static bool operator >(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level > rhs.m_level; }
        public static bool operator <=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level <= rhs.m_level; }
        public static bool operator >=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.m_level >= rhs.m_level; }
        public int /* IComparable<<#= Scale #>> */ CompareTo(<#= Scale #> other) { return this.m_level.CompareTo(other.m_level); }
        #endregion

        #region Arithmetic
        public static <#= Scale #> operator +(<#= Scale #> lhs, <#= Unit #> rhs) { return new <#= Scale #>(lhs.m_level + rhs); }
        public static <#= Scale #> operator +(<#= Unit #> lhs, <#= Scale #> rhs) { return new <#= Scale #>(lhs + rhs.m_level); }
        public static <#= Scale #> operator -(<#= Scale #> lhs, <#= Unit #> rhs) { return new <#= Scale #>(lhs.m_level - rhs); }
        public static <#= Unit #> operator -(<#= Scale #> lhs, <#= Scale #> rhs) { return (lhs.m_level - rhs.m_level); }
        public static <#= Scale #> operator -(<#= Scale #> q) { return new <#= Scale #>(-q.m_level); }
        public static <#= Scale #> operator ++(<#= Scale #> q) { return q + <#= Unit #>.One; }
        public static <#= Scale #> operator --(<#= Scale #> q) { return q - <#= Unit #>.One; }
        #endregion

        #region Formatting
        public override string ToString() { return ToString(<#= Scale #>.Format, null); }
        public string ToString(string format) { return ToString(format, null); }
        public string ToString(IFormatProvider fp) { return ToString(<#= Scale #>.Format, fp); }
        public string /* IFormattable */ ToString(string format, IFormatProvider fp)
        {
            return m_level.ToString(format ?? <#= Scale #>.Format, fp);
        }
        #endregion

        #region Static fields
        private static readonly <#= Unit #> s_offset /* from <#= s.RefPointNormalized #> reference level */ = new <#= Unit #>(<#= Offset #>);
        private static readonly int s_family = <#= Family #>;
        private static /*mutable*/ string s_format = "<#= Format #>";
        private static readonly Scale<<#= Value #>> s_proxy = new <#= ScaleProxy #>();

        private static readonly <#= Scale #> s_zero = new <#= Scale #>(<#= Zero #>);
        #endregion
        
        #region Static properties
        public static <#= Unit #> Offset { get { return s_offset; } }
        public static int Family { get { return s_family; } }
        public static string Format { get { return s_format; } set { s_format = value; } }
        public static Scale<<#= Value #>> Proxy { get { return s_proxy; } }

        public static <#= Scale #> Zero { get { return s_zero; } }
        #endregion
    }
    public partial class <#= ScaleProxy #> : Scale<<#= Value #>>
    {
        #region Properties
        public override int Family { get { return <#= Scale #>.Family; } }
        public override Unit Unit { get { return <#= Unit #>.Proxy; } }
        public override IQuantity<<#= Value #>> Offset { get { return <#= Scale #>.Offset; } }
        public override string Format { get { return <#= Scale #>.Format; } set { <#= Scale #>.Format = value; } }
        #endregion

        #region Constructor(s)
        public <#= ScaleProxy #>() :
            base(typeof(<#= Scale #>))
        {
        }
        #endregion

        #region Methods
        public override ILevel<<#= Value #>> Create(<#= Value #> value)
        {
            return new <#= Scale #>(value);
        }
        public override ILevel<<#= Value #>> From(ILevel<<#= Value #>> level)
        {
            return <#= Scale #>.From(level);
        }
        public override ILevel<<#= Value #>> From(IQuantity<<#= Value #>> quantity)
        {
            return <#= Scale #>.From(quantity);
        }
        #endregion
    }
<#+
    }
#>

<#+
    void MakeCatalog(List<UnitType> units, List<ScaleType> scales)
    {
#>
    public static partial class Catalog
    {
        #region Constructor
        static Catalog()
        {
            Allocate(
                <#= units.Count #> + <#= __scalestartfamily #>, // <#= units.Count #> units  + <#= __scalestartfamily #> entries for possible late units (1 for each family)
                <#= scales.Count #> + <#= __family - __scalestartfamily #> // <#= scales.Count #> scales + <#= __family - __scalestartfamily #> entries for possible late scales (1 for each family)
            );
            Populate();
        }
        #endregion

        #region Populate
        public static void Populate()
        {
            // units:
<#+
        foreach (UnitType u in units)
        {
#>
            Add(<#= u.Name #>.Proxy);            // <#= u.ToString() #>  (<#= u.FamilyPrime().Name #>)
<#+
        }
#>

            // scales:
<#+
        foreach (ScaleType s in scales)
        {
#>
            Add(<#= s.Name #>.Proxy);            // <#= s.ToString() #>  (<#= s.FamilyPrime().Name #>)
<#+
        }
#>
        }
        #endregion
    }
<#+
    }
#>

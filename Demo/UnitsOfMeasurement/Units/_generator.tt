<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" encoding="utf-8" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="$(ProjectDir)..\..\VisualStudioExtension\Parser\bin\$(Configuration)\Man.UnitsOfMeasurement.Parser.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Man.UnitsOfMeasurement" #>
<#
    Initialize("_definitions.txt");

    List<UnitType> units = new List<UnitType>();
    List<ScaleType> scales = new List<ScaleType>();
    using (StreamReader input = File.OpenText(__inputFilePath))
    {
        Lexer lexer = new Lexer(input, LogParserError);
        Parser parser = new Parser(lexer, units, scales);
        parser.Parse();
    }

    __late = false;    
    __family = 0;

    if (__one_cs_file)
    {
        BeginItem();
        foreach (UnitType u in units)
        {
            MakeUnit(u);
        }
        __scalestartfamily = __family;
        foreach (ScaleType s in scales)
        {
            MakeScale(s);
        }
        MakeCatalogPopulate(units, scales);
        TerminateSaveItem(__templateName + ".cs");
    }
    else
    {
        foreach (UnitType u in units)
        {
            BeginItem();
            MakeUnit(u);
            TerminateSaveItem(u.Name + ".cs");
        }
        __scalestartfamily = __family;
        foreach (ScaleType s in scales)
        {
            BeginItem();
            MakeScale(s);
            TerminateSaveItem(s.Name + ".cs");
        }
        BeginItem();
        MakeCatalogPopulate(units, scales);
        TerminateSaveItem("Catalog.Populate.cs");
    }

    MakeDimensionalAnalysisInclude(units, scales);
    SaveItem("_dimensional_analysis.include");

    Summarize(units, scales);
    DeleteObsoleteItems();
    if (!__one_cs_file) __template.ExpandView();
#>

<#@ include file="_unit.t4" #>
<#@ include file="_scale.t4" #>

<#+
    string __copyright =
@"/*******************************************************************************

    Units of Measurement for C# applications

    Copyright (C) Marek Aniola

    This program is provided to you under the terms of the license
    as published at https://github.com/mangh/unitsofmeasurement


********************************************************************************/";

    bool __one_cs_file = false;  // set this to "true" to generate all units & scales in a single .cs file
    
    // Compile-time units/scales can access (internally) m_value/m_level
    // fields of other compile-time units/scales. Late units/scales cannot
    // access them; they access them via Value/Level public properties only.
    bool __late;

    int __family;
    int __scalestartfamily;
    string __templateFolder;
    string __templateName;
    string __inputFilePath;
    string __targetNamespace;
    string[] __importNamespace = { "System" };

    EnvDTE.Project __project;       // project containing this template
    EnvDTE.ProjectItem __template;  // this template

    List<string> __savedItems;

    void Initialize(string inputFileName)
    {
        __templateFolder = Path.GetDirectoryName(Host.TemplateFile);
        __templateName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
        __inputFilePath = Path.Combine(__templateFolder, inputFileName);
        __project = GetTemplateProject();
        __template = GetTemplateItem(__project.ProjectItems);
        __savedItems = new List<string>();

        __targetNamespace = (string)__template.Properties.Item("CustomToolNamespace").Value;
        if (string.IsNullOrWhiteSpace(__targetNamespace))
            __targetNamespace = (string)__project.Properties.Item("DefaultNamespace").Value;
    }

    EnvDTE.Project GetTemplateProject()
    {
        IServiceProvider serviceProvider = (IServiceProvider)this.Host;
        // EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetService(typeof(EnvDTE.DTE));    // for VS2010-
        EnvDTE.DTE dte = (EnvDTE.DTE)serviceProvider.GetCOMService(typeof(EnvDTE.DTE));   // for VS2012+
        Array projects = (Array)dte.ActiveSolutionProjects;
        return (EnvDTE.Project)projects.GetValue(0);
    }

    EnvDTE.ProjectItem GetTemplateItem(EnvDTE.ProjectItems items)
    {
        if (items != null)
        {
            foreach(EnvDTE.ProjectItem item in items)
            {
                EnvDTE.Property itempath = item.Properties.Item("FullPath");
                if ((itempath != null) && Host.TemplateFile.Equals((string)itempath.Value, StringComparison.OrdinalIgnoreCase))
                    return item;

                EnvDTE.ProjectItem subitem = GetTemplateItem(item.ProjectItems);
                if (subitem != null)
                    return subitem;
            }
        }
        return null;
    }

    void LogParserError(bool isError, int line, int column, string token, string message)
    {
        var error = new CompilerError(__inputFilePath, line, column, token, message);
        error.IsWarning = !isError;
        this.Errors.Add(error);
    }

    void BeginItem()
    {
        WriteLine(__copyright);
        foreach(string ns in __importNamespace)
        {
            WriteLine("using {0};", ns);
        }
        WriteLine(string.Empty);
        WriteLine("namespace {0}", __targetNamespace);
        WriteLine(@"{");
    }

    void TerminateItem()
    {
        WriteLine(@"}");
    }

    void SaveItem(string fileName)
    {
        string filePath = Path.Combine(__templateFolder, fileName);

        File.WriteAllText(filePath, this.GenerationEnvironment.ToString());

        this.GenerationEnvironment.Clear();

        EnvDTE.ProjectItem item = __template.ProjectItems.AddFromFile(filePath);

        /* 
         * The following properties are set automatically for .NET Framework(s)
         * but may be of use or required for other .NET flavours. 
         */

        // // DesignTime (optional boolean): ???
        // item.Properties.Item("DesignTime").Value = "True";

        // // AutoGen (optional boolean): indicates whether the item/file was generated for the project by the VS IDE.
        // item.Properties.Item("AutoGen").Value = "True";

        // // DependentUpon (optional string): specifies the file this item/file depends on to compile correctly.
        // item.Properties.Item("DependentUpon").Value = __templateName + ".tt";

        __savedItems.Add(fileName);
    }

    void TerminateSaveItem(string fileName)
    {
        TerminateItem();
        SaveItem(fileName);
    }

    void DeleteObsoleteItems()
    {
        string summaryItemName = __templateName + ".txt";
        foreach (EnvDTE.ProjectItem item in __template.ProjectItems)
        {
            if (!item.Name.Equals(summaryItemName, StringComparison.OrdinalIgnoreCase) && !__savedItems.Contains(item.Name))
                item.Delete();
        }
    }

    void MakeDimensionalAnalysisInclude(List<UnitType> units, List<ScaleType> scales)
    {
        string indent = "    ";
        
        WriteLine("#if DIMENSIONAL_ANALYSIS");
        WriteLine("{0}using {1};", indent, __targetNamespace);
        WriteLine("{0}using static {1}.Math;", indent, __targetNamespace);
        WriteLine("#else");

        string format = "{0}using {1} = {2}.{3};";
        
        foreach (UnitType u in units) 
        {
            var type = u.Factor.Value.Type;
            WriteLine(format, indent, u.Name, type.Namespace, type.NetName);
        }

        foreach (ScaleType s in scales)
        {
            var type = s.Unit.Factor.Value.Type;
            WriteLine(format, indent, s.Name, type.Namespace, type.NetName);
        }
        
        WriteLine("{0}using static {1}.Math;", indent, "System");

        WriteLine("#endif");
    }

    void Summarize(List<UnitType> units, List<ScaleType> scales)
    {
        WriteLine("Units and Scales generated on {0}", DateTime.Now);
        WriteLine(string.Empty);

        WriteLine(
@"////////////////////////////////////////////////////////////////////////////////
//
//  U N I T S                              | {0} units | {1} families (id: {2} - {3})
//
////////////////////////////////////////////////////////////////////////////////
[dim] unit {{tags}} : factor (family)", units.Count, __scalestartfamily, 0, __scalestartfamily - 1);

        foreach (UnitType u in units)
        {
            WriteLine(string.Empty);
            WriteLine("{0} ({1})", u.ToString(), (u.Prime ?? u).Name);
            WriteLine(string.Empty);

            foreach (MeasureType s in u.Relatives())
            {
                WriteLine("    ({0}){1}", u.Name, ((UnitType)s).Name);
            }
            foreach (BinaryOperation o in u.OuterOperations)
            {
                WriteLine("    {0} = {1} {2} {3}", o.Result.Name, o.Lhs.Name, o.Operation, o.Rhs.Name);
            }
        }

        WriteLine(string.Empty);
        WriteLine(
@"////////////////////////////////////////////////////////////////////////////////
//
//  S C A L E S                            | {0} scales | {1} families (id: {2} - {3})
//
////////////////////////////////////////////////////////////////////////////////
[dim] scale : refpoint = unit offset (family)", scales.Count, __family - __scalestartfamily, __scalestartfamily, __family - 1);

        foreach (ScaleType s in scales)
        {
            WriteLine(string.Empty);
            WriteLine("{0} ({1})", s.ToString(), (s.Prime ?? s).Name);
            WriteLine(string.Empty);

            foreach (MeasureType x in s.Relatives())
            {
                WriteLine("    ({0}){1}", s.Name, ((ScaleType)x).Name);
            }
        }

        WriteLine(string.Empty);
        WriteLine("// End of report ///////////////////////////////////////////////////////////////");
    }

    void MakeCatalogPopulate(List<UnitType> units, List<ScaleType> scales)
    {
#>
    public static partial class Catalog
    {
        #region Constructor
        static Catalog()
        {
            // <#= units.Count #> units + 1 extra entry for each of <#= __scalestartfamily #> families for possible late units
            // <#= scales.Count #> scales + 1 extra entry for each of <#= __family - __scalestartfamily #> families for possible late scales
            Allocate(<#= units.Count #> + <#= __scalestartfamily #>, <#= scales.Count #> + <#= __family - __scalestartfamily #>);
            Populate();
        }
        #endregion

        #region Populate
        public static void Populate()
        {
            // units:
<#+
        foreach (UnitType u in units)
        {
            int offset = 32 - u.Name.Length - 12;
#>
            Add(<#= u.Name #>.Proxy);<#= (offset <= 0) ? " " : " ".PadRight(offset) #>// <#= (u.Prime ?? u).Name #> <#= u.ToString() #>
<#+
        }
#>

            // scales:
<#+
        foreach (ScaleType s in scales)
        {
            int offset = 32 - s.Name.Length - 12;
#>
            Add(<#= s.Name #>.Proxy);<#= (offset <= 0) ? " " : " ".PadRight(offset) #>// <#= (s.Prime ?? s).Name #> <#= s.ToString() #>
<#+
        }
#>
        }
        #endregion
    }
<#+
    }
#>
